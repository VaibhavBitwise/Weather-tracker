import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import requests
import threading
import speech_recognition as sr
import webbrowser
import os


api_key = "8b5d3######36" # use your api key
base_url = "https://api.openweathermap.org/data/2.5/weather"


def get_weather(city):
    url = f"{base_url}?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    data = response.json()
    if data.get("cod")==200:
        return{
            "city":city,
            "temperature":data["main"]["temp"],
            "description":data["weather"][0]["description"],
            "humidity":data["main"]["humidity"],
            "wind_speed":data["wind"]["speed"]
        }
    return None

def update_weather(city):
    weather = get_weather(city)
    if weather:
        result_label.config(
            text = f"City: {weather['city']}\n"
                 f"Temp: {weather['temperature']}Â°C\n"
                 f"Weather: {weather['description']}\n"
                 f"Humidity: {weather['humidity']}%\n"
                 f"Wind: {weather['wind_speed']} m/s"
        )
    else:
        messagebox.showerror("error","city not found")



def recognize_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        messagebox.showinfo("voice input","say a city name")
        audio = recognizer.listen(source)
    try:
        city = recognizer.recognize_google(audio)
        city_entry.delete(0,tk.END)
        city_entry.insert(0,city)
        update_weather(city)
    except sr.UnknownValueError:
        messagebox.showerror("error","couldn't understand. try again.")
    except sr.RequestError:
        messagebox.showerror("error","speech recognition not available.")


root = tk.Tk()
root.title("weather app")
root.geometry("500x500")
root.resizable(False,False)


canvas = tk.Canvas(root, width=500, height=500)
canvas.pack(fill="both",expand=True)


weather_bg_map = {
    "storm": r"C:\Users\Vaibhav Ku. Tiwari\Downloads\stormy.jpg",
    "rain": r"C:\Users\Vaibhav Ku. Tiwari\Downloads\rainy.jpg",
    "cloud": r"C:\Users\Vaibhav Ku. Tiwari\Downloads\cloudy.jpg",
    "sun": r"C:\Users\Vaibhav Ku. Tiwari\Downloads\sunny.jpg",
    "clear": r"C:\Users\Vaibhav Ku. Tiwari\Downloads\sunny.jpg"
}

def set_bg_by_weather(description):
    desc = description.lower()
    img_path = None
    for key, path in weather_bg_map.items():
        if key in desc:
            img_path = path
            break
    if img_path and os.path.exists(img_path):
        img = Image.open(img_path).resize((500, 500))
        bg_img = ImageTk.PhotoImage(img)
        canvas.bg_img = bg_img  
        canvas.itemconfig(bg_image_id, image=bg_img)
    else:
        canvas.config(bg="lightblue")

bg_image_id = canvas.create_image(0, 0, anchor="nw")


city_entry = tk.Entry(root, font=("arial", 14), bd=0, highlightthickness=0, relief="flat", bg="#f0f0f0", fg="#f0f0f0", insertbackground="#f0f0f0")
city_entry.config(state="readonly")  

result_label = tk.Label(root, font=("Segoe UI", 16, "bold"), bg="#e0f7fa", fg="#222", justify="center", wraplength=400, borderwidth=2, relief="groove", padx=20, pady=20)



canvas.create_window(250, 40, window=city_entry, width=1, height=1) 
canvas.create_window(250, 250, window=result_label)


def startup_voice_weather():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        messagebox.showinfo("voice input", "Say a city name")
        audio = recognizer.listen(source)
    try:
        city = recognizer.recognize_google(audio)
        city_entry.config(state="normal")
        city_entry.delete(0, tk.END)
        city_entry.insert(0, city)
        city_entry.config(state="readonly")
        weather = get_weather(city)
        if weather:
            set_bg_by_weather(weather["description"])
            summary = (
                f"The weather in {weather['city'].title()} is {weather['description']}, "
                f"temperature {weather['temperature']} degrees Celsius, "
                f"humidity {weather['humidity']} percent, "
                f"wind {weather['wind_speed']} meters per second."
            )
            result_label.config(text=summary)
        else:
            result_label.config(text="City not found. Please restart the app.")
    except sr.UnknownValueError:
        result_label.config(text="Couldn't understand. Please restart the app.")
    except sr.RequestError:
        result_label.config(text="Speech recognition not available.")


root.after(100, startup_voice_weather)

root.mainloop()
